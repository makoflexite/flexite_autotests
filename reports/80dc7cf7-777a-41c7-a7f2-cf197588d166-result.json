{"name": "test_ordinary_user_can_login_to_web_with_eng_lang", "status": "broken", "statusDetails": {"message": "splinter.exceptions.DriverNotFoundError: No driver for iexplorer", "trace": "driver_name = 'iexplorer', retry_count = 3, args = (), kwargs = {}\n\n    def Browser(driver_name=\"firefox\", retry_count=3, *args, **kwargs):\n        \"\"\"\n        Returns a driver instance for the given name.\n    \n        When working with ``firefox``, it's possible to provide a profile name\n        and a list of extensions.\n    \n        If you don't provide any driver_name, then ``firefox`` will be used.\n    \n        If there is no driver registered with the provided ``driver_name``, this\n        function will raise a :class:`splinter.exceptions.DriverNotFoundError`\n        exception.\n        \"\"\"\n    \n        try:\n>           driver = _DRIVERS[driver_name]\nE           KeyError: 'iexplorer'\n\n..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\splinter\\browser.py:86: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'browser' for <Function test_ordinary_user_can_login_to_web_with_eng_lang>>\n\n    @pytest.fixture(scope=\"function\")\n    def browser(request):\n        browser_name = request.config.getoption(\"browser\")\n        browser = None\n        if browser_name == \"chrome\":\n            print(\"\\nstart chrome browser for test..\")\n            browser = Browser(browser_name)\n        elif browser_name == \"firefox\":\n            print(\"\\nstart firefox browser for test..\")\n            browser = Browser(browser_name)\n        elif browser_name == \"iexplorer\":\n            print(\"\\nstart ie browser for test..\")\n>           browser = Browser(browser_name)\n\nconftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver_name = 'iexplorer', retry_count = 3, args = (), kwargs = {}\n\n    def Browser(driver_name=\"firefox\", retry_count=3, *args, **kwargs):\n        \"\"\"\n        Returns a driver instance for the given name.\n    \n        When working with ``firefox``, it's possible to provide a profile name\n        and a list of extensions.\n    \n        If you don't provide any driver_name, then ``firefox`` will be used.\n    \n        If there is no driver registered with the provided ``driver_name``, this\n        function will raise a :class:`splinter.exceptions.DriverNotFoundError`\n        exception.\n        \"\"\"\n    \n        try:\n            driver = _DRIVERS[driver_name]\n        except KeyError:\n>           raise DriverNotFoundError(\"No driver for %s\" % driver_name)\nE           splinter.exceptions.DriverNotFoundError: No driver for iexplorer\n\n..\\..\\appdata\\local\\programs\\python\\python38-32\\lib\\site-packages\\splinter\\browser.py:88: DriverNotFoundError"}, "start": 1597830214535, "stop": 1597830214535, "uuid": "f63442b3-8e87-4c31-819a-e2520e026626", "historyId": "74dcf7a7839d64eae7e481a1efcd58aa", "testCaseId": "b3fcf9a7b541b590274b8c32b5629971", "fullName": "test_login_page#test_ordinary_user_can_login_to_web_with_eng_lang", "labels": [{"name": "feature", "value": "Login page tests"}, {"name": "suite", "value": "test_login_page"}, {"name": "host", "value": "ws-kononova"}, {"name": "thread", "value": "15820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login_page"}]}